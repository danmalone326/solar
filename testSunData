#!/usr/bin/python

import database
import json
from datetime import datetime, timedelta
import time
import urllib,urllib2

debug = True

# Should use database versions of these variables, e.g. database.dateOnlyFormat
# dateOnlyFormat='%Y-%m-%d'
# datetimeFormat='%Y-%m-%d %H:%M:%S'


milDateFormat="%m/%d/%Y"
milDateTimeFormat="%m/%d/%Y %H:%M"

def tzOffset():
    timestamp = time.time()
    timeNow = datetime.fromtimestamp(timestamp)
    timeUtc = datetime.utcfromtimestamp(timestamp)
    
    if (timeNow<timeUtc):
        offsetStr="-"+str(timeUtc-timeNow)
    else:
        offsetStr="+"+str(timeNow-timeUtc)
    
    return offsetStr[:offsetStr.find(":")]
    
def getCurrentSunData(siteInfo,forDateStr,tzStr):
    
    forDtMilStr = datetime.strptime(forDateStr, dateOnlyFormat).strftime(milDateFormat)
    if debug:
        print forDtMilStr
    # https://api.usno.navy.mil/rstt/oneday?date=5/15/2019&coords=35.134686,-120.562267&tz=-07
    url="https://api.usno.navy.mil/rstt/oneday?date="+forDtMilStr+"&coords="+siteInfo['lat']+','+siteInfo['lon']+"&tz="+tzStr
    if debug:
        print url

    try:
        response=urllib2.urlopen(url)
        responseData = json.loads(response.read().encode("utf-8"))
        if debug:
            print responseData['sundata']
        
        sunDict={}
#         sunDict['sundate']=forDt

        sunDict['tzOffset']=tzStr
        for dataset in responseData['sundata']:
            if (dataset['phen']=='R'):
                sunDict['sunrise']=datetime.strptime(forDtMilStr+" "+dataset['time'],milDateTimeFormat).strftime(database.datetimeFormat)
            elif (dataset['phen']=='S'):
                sunDict['sunset']=datetime.strptime(forDtMilStr+" "+dataset['time'],milDateTimeFormat).strftime(database.datetimeFormat)
    
    except urllib2.HTTPError as e:
        # This means something went wrong.
        print "Unable to get sun data."
        print 'getSunData: {}'.format(e.code)
        sunDict=None
    
    except urllib2.URLError as e:
        # This means something went wrong.
        print "Unable to get sun data."
        print 'getSunData: '
        print e.reason
        sunDict=None

    return sunDict

def updateSunData(siteInfo):
    preDays = 5
    
    updated = False
    
    nowDate = datetime.now().date()
    nowDateStr=nowDate.strftime(database.dateOnlyFormat)
    nowHour=int(datetime.now().strftime('%H'))
    if debug:
        print nowDate
        print nowDateStr
        print nowHour

    lastPreDate = nowDate + timedelta(days=preDays)
    lastPreDateStr=lastPreDate.strftime(database.dateOnlyFormat)
    if debug:
        print lastPreDate
        print lastPreDateStr
    
    tzStr = tzOffset()
    if debug:
        print tzStr

    savedSunData=database.getSunData2(siteInfo)
    if debug:
        print "savedSunData:"
        print(json.dumps(savedSunData, indent=4, sort_keys=True))


    # If don't have today
    # or today tz not correct
    # or between 3 and 4 am and don't have today+X
    
    if ((nowDateStr not in savedSunData) or
        (savedSunData[nowDateStr]['tzOffset'] != tzStr) or
        ((nowHour == 3) and (lastPreDateStr not in savedSunData))):
        # Now update the saved data
        
        if (len(savedSunData) > 0):
            maxSavedDateStr=max(savedSunData)
        
            # First delete unneeded/old dates
            for key in sorted(savedSunData):
                if debug:
                    print key
                
                if ((key < nowDateStr) and (key != maxSavedDateStr)):
                    del savedSunData[key]
                    updated = True

        
        # Now update today and preDays if needed
        for preDaysIndex in range(preDays+1):
            thisDate = nowDate + timedelta(days=preDaysIndex)
            thisDateStr = thisDate.strftime(database.dateOnlyFormat)
            if debug:
                print thisDate
                print thisDateStr
            
            # Update if day doesn't exist or if timezone is off
            if ((thisDateStr not in savedSunData) or
                (savedSunData[thisDateStr]['tzOffset'] != tzStr)):
                thisSunData = getCurrentSunData(siteInfo,thisDateStr,tzStr)
                if (thisSunData is not None):
                    savedSunData[thisDateStr] = thisSunData
                    updated = True
                else:
                    break
                    
        if (updated):
            if debug:
                print "saving SunData:"
                print(json.dumps(savedSunData, indent=4, sort_keys=True))
            database.setSunData2(siteInfo,savedSunData)

    return updated


def getBestSunData(siteInfo):
    savedSunData=database.getSunData(siteInfo)
    
    nowDate = datetime.now().date()
    nowDateStr=nowDate.strftime(database.dateOnlyFormat)
    
    if (nowDateStr in savedSunData):
        result=savedSunData[nowDateStr]
    elif (len(savedSunData) > 0):
        maxSavedDateStr=max(savedSunData)
        result=savedSunData[maxSavedDateStr]
    else:
        result={'sunrise':'1970-01-01 00:00:00', 'sunset':'1970-01-01 00:00:00', 'tzOffset':'0'}
    
    return result

def getLast24Hours(siteInfo):
    toDate = datetime.now()
    fromDate = toDate - timedelta(days=1)

    toDateStr=toDate.strftime(database.datetimeFormat)
    fromDateStr=fromDate.strftime(database.datetimeFormat)
    
    print fromDateStr
    print toDateStr
    
    return database.getCurrentBetween(siteInfo,fromDateStr,toDateStr)

def generateRestData(siteInfo):
    currentTime = datetime.now()
    currentTimeStr = currentTime.strftime(database.datetimeFormat)

    # Get right now data
    restData = {}
    restData['now'] = database.getClosestOverview(siteInfo,currentTimeStr)
    restData['now'].update(getBestSunData(siteInfo))
    
    # Get data from this time yesterday
    thisTimeYesterday = currentTime - timedelta(days=1)
    thisTimeYesterdayStr = thisTimeYesterday.strftime(database.datetimeFormat)
    restData['yesterday'] = database.getClosestOverview(siteInfo,thisTimeYesterdayStr)

    if debug: 
        print restData
    
    # Get peaks for today and yesterday
    yesterdayStart = thisTimeYesterday.replace(hour=0, minute=0, second=0, microsecond=0)
    yesterdayStartStr = yesterdayStart.strftime(database.datetimeFormat)
    
    peaks = database.getDailyBetween(siteInfo,yesterdayStartStr,currentTimeStr)
    if debug:
        print peaks
    
    currentDateStr = currentTime.strftime(database.dateOnlyFormat)
    yesterdayDateStr = yesterdayStart.strftime(database.dateOnlyFormat)

    try:
        restData['now']['peakPower'] = peaks[currentDateStr]['peakPower']
    except (KeyError):
        if debug:
            print "KeyError1"
        restData['now']['peakPower'] = 0
    except:
        raise
    
    try:
        restData['yesterday']['peakPower'] = peaks[yesterdayDateStr]['peakPower']
        restData['yesterday']['maxEnergy'] = peaks[yesterdayDateStr]['energy']  
    except (KeyError):
        if debug:
            print "KeyError2"
        restData['yesterday']['peakPower'] = 0
        restData['yesterday']['maxEnergy'] = 0 
    except:
        raise
    
    # Get 30 day averages for peak power and energy
    # and daily details
    numDays = 30
    averageStartDate = currentTime.replace(hour=0, minute=0, second=0, microsecond=0) - timedelta(days=numDays)
    averageEndDate = currentTime.replace(hour=0, minute=0, second=0, microsecond=0) - timedelta(seconds=1)
    
    restData['30days'] = database.getAverageDayValues(siteInfo,averageStartDate,averageEndDate)
    restData['30days']['detail'] = database.getDailyBetween(siteInfo,averageStartDate,currentTime)
    
    # Get weekly details
    numWeeks = 12
    weeklyStartDate = currentTime.replace(hour=0, minute=0, second=0, microsecond=0) - timedelta(days=currentTime.weekday()) - timedelta(days=numWeeks*7)
    
    restData['weekly'] = {}
    restData['weekly']['detail'] = database.getWeeklyBetween(siteInfo,weeklyStartDate,currentTime)
    
    # Get Monthly details
    numMonths = 12
    monthlyStartDate = currentTime - timedelta(days=numMonths*30)
    monthlyStartDate = monthlyStartDate.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    
    restData['monthly'] = {}
    restData['monthly']['detail'] = database.getMonthlyBetween(siteInfo,monthlyStartDate,currentTime)
    
    return restData  
    
#
# main
#

siteInfo = database.getSiteInfo("dmalone")
# updateSunData(siteInfo)

# print(json.dumps(getLast24Hours(siteInfo), indent=4, sort_keys=True)) 

print(json.dumps(generateRestData(siteInfo), indent=4, sort_keys=True)) 

# currentTime = datetime.now()
# print currentTime
# print currentTime.replace(hour=0, minute=0, second=0, microsecond=0) - timedelta(seconds=1)

# updated = False
# 
# if updateSunData(siteInfo):
#     updated = True
# 
# if updateOverview(siteInfo):
#     updated = True
# 
# if updated:
#     outputJSON(siteInfo)

# result = database.getSunData2(siteInfo)
# 
# print(json.dumps(result, indent=4, sort_keys=True))
# 
# 
# comp = '2019-08-07'
# 
# print max(result)
# 
# for key in sorted(result):
#     print key
#     if (key<comp):
#         print "\tless"
#     if (key==comp):
#         print "\tsame"
#     if (key>comp):
#         print "\tmore"
#     last = result[key]
#     
# print key
# print last
# 
# 
# nowDT = datetime.now().date()
# nowDate=nowDT.strftime(database.dateOnlyFormat)
# nowHour=int(datetime.now().strftime('%H'))
# if debug:
#     print nowDT
#     print nowDate
#     print nowHour


# y='2019-08-09'
# x = getCurrentSunData(siteInfo,y)
# print(json.dumps(x, indent=4, sort_keys=True))
# result[y]=x

# database.setSunData2(siteInfo,result)
# 
# 
# result = database.getSunData2(siteInfo)
# 
# print(json.dumps(result, indent=4, sort_keys=True))


