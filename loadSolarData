#!/usr/bin/python

import database
import json
from datetime import datetime, timedelta
import time
import urllib,urllib2

debug = False

# Should use database versions of these variables, e.g. database.dateOnlyFormat
# dateOnlyFormat='%Y-%m-%d'
# datetimeFormat='%Y-%m-%d %H:%M:%S'

milDateFormat="%m/%d/%Y"
milDateTimeFormat="%m/%d/%Y %H:%M"

def getCurrentOverview(siteInfo):
    restURL = 'https://monitoringapi.solaredge.com/site/'+siteInfo['id']+'/overview?api_key='+siteInfo['apiKey']
    try:
        restResponse = urllib2.urlopen(restURL)
    except urllib2.HTTPError as e:
        # This means something went wrong.
        raise Exception('getCurrentData: {}'.format(e.code))
        
    overview = json.loads(restResponse.read().encode("utf-8"))
    
#     with open('overview.json', 'r') as file:
#         overview = json.load(file)

    overviewDict={}
    overviewDict['queryTime'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    overviewDict['lastUpdateTime'] = overview['overview']['lastUpdateTime'].encode("utf-8")
    overviewDict['currentPower'] = overview['overview']['currentPower']['power']
    overviewDict['lastDayEnergy'] = overview['overview']['lastDayData']['energy']
    overviewDict['lastMonthEnergy'] = overview['overview']['lastMonthData']['energy']
    overviewDict['lastYearEnergy'] = overview['overview']['lastYearData']['energy']
    overviewDict['lifetimeEnergy'] = overview['overview']['lifeTimeData']['energy']

    return overviewDict

def updateOverview(siteInfo):
    updated = False
    
    lastOverview = database.getLastOverview(siteInfo)
    savedSunData = getBestSunData(siteInfo)

    sunriseDT = datetime.strptime(savedSunData['sunrise'],database.datetimeFormat)
    sunsetDT = datetime.strptime(savedSunData['sunset'],database.datetimeFormat)
    now = datetime.now()
    nowMinute = int(now.strftime('%M'))

    if ((nowMinute == 0) or                    # Always once an hour
        (lastOverview["currentPower"] > 0) or  # If we were generating at the last update
        ((now > sunriseDT) and (now < sunsetDT))): # Sun is up

        if debug:
            print "Updating"
        
        currentData = getCurrentOverview(siteInfo)
        updated = True

        if debug:
            print "current:"
            print currentData
    
        if (currentData['lastUpdateTime'] > lastOverview['lastUpdateTime']):
            database.insertOverview(siteInfo,currentData)
        else:
            if debug:
                print "no update"
    
    return updated


def tzOffset():
    timestamp = time.time()
    timeNow = datetime.fromtimestamp(timestamp)
    timeUtc = datetime.utcfromtimestamp(timestamp)
    
    if (timeNow<timeUtc):
        offsetStr="-"+str(timeUtc-timeNow)
    else:
        offsetStr="+"+str(timeNow-timeUtc)
    
    return offsetStr[:offsetStr.find(":")]
    
def getCurrentSunData(siteInfo,forDateStr,tzStr):
    
    forDtMilStr = datetime.strptime(forDateStr, database.dateOnlyFormat).strftime(milDateFormat)
    if debug:
        print forDtMilStr
    # https://api.usno.navy.mil/rstt/oneday?date=5/15/2019&coords=35.134686,-120.562267&tz=-07
    url="https://api.usno.navy.mil/rstt/oneday?date="+forDtMilStr+"&coords="+siteInfo['lat']+','+siteInfo['lon']+"&tz="+tzStr
    if debug:
        print url

    try:
        response=urllib2.urlopen(url)
        responseData = json.loads(response.read().encode("utf-8"))
        if debug:
            print responseData['sundata']
        
        sunDict={}
#         sunDict['sundate']=forDt

        sunDict['tzOffset']=tzStr
        for dataset in responseData['sundata']:
            if (dataset['phen']=='R'):
                sunDict['sunrise']=datetime.strptime(forDtMilStr+" "+dataset['time'],milDateTimeFormat).strftime(database.datetimeFormat)
            elif (dataset['phen']=='S'):
                sunDict['sunset']=datetime.strptime(forDtMilStr+" "+dataset['time'],milDateTimeFormat).strftime(database.datetimeFormat)
    
    except urllib2.HTTPError as e:
        # This means something went wrong.
        print "Unable to get sun data."
        print 'getSunData: {}'.format(e.code)
        sunDict=None
    
    except urllib2.URLError as e:
        # This means something went wrong.
        print "Unable to get sun data."
        print 'getSunData: '
        print e.reason
        sunDict=None

    return sunDict

def updateSunData(siteInfo):
    preDays = 5
    
    updated = False
    
    nowDate = datetime.now().date()
    nowDateStr=nowDate.strftime(database.dateOnlyFormat)
    nowHour=int(datetime.now().strftime('%H'))
    if debug:
        print nowDate
        print nowDateStr
        print nowHour

    lastPreDate = nowDate + timedelta(days=preDays)
    lastPreDateStr=lastPreDate.strftime(database.dateOnlyFormat)
    if debug:
        print lastPreDate
        print lastPreDateStr
    
    tzStr = tzOffset()
    if debug:
        print tzStr

    savedSunData=database.getSunData(siteInfo)
    if debug:
        print "savedSunData:"
        print(json.dumps(savedSunData, indent=4, sort_keys=True))


    # If don't have today
    # or today tz not correct
    # or between 3 and 4 am and don't have today+X
    
    if ((nowDateStr not in savedSunData) or
        (savedSunData[nowDateStr]['tzOffset'] != tzStr) or
        ((nowHour == 3) and (lastPreDateStr not in savedSunData))):
        # Now update the saved data
        
        if (len(savedSunData) > 0):
            maxSavedDateStr=max(savedSunData)
        
            # First delete unneeded/old dates
            for key in sorted(savedSunData):
                if debug:
                    print key
                
                if ((key < nowDateStr) and (key != maxSavedDateStr)):
                    del savedSunData[key]
                    updated = True

        
        # Now update today and preDays if needed
        for preDaysIndex in range(preDays+1):
            thisDate = nowDate + timedelta(days=preDaysIndex)
            thisDateStr = thisDate.strftime(database.dateOnlyFormat)
            if debug:
                print thisDate
                print thisDateStr
            
            # Update if day doesn't exist or if timezone is off
            if ((thisDateStr not in savedSunData) or
                (savedSunData[thisDateStr]['tzOffset'] != tzStr)):
                thisSunData = getCurrentSunData(siteInfo,thisDateStr,tzStr)
                if (thisSunData is not None):
                    savedSunData[thisDateStr] = thisSunData
                    updated = True
                else:
                    break
                    
        if (updated):
            if debug:
                print "saving SunData:"
                print(json.dumps(savedSunData, indent=4, sort_keys=True))
            database.setSunData(siteInfo,savedSunData)

    return updated


def getBestSunData(siteInfo):
    savedSunData=database.getSunData(siteInfo)
    
    nowDate = datetime.now().date()
    nowDateStr=nowDate.strftime(database.dateOnlyFormat)
    
    if (nowDateStr in savedSunData):
        result=savedSunData[nowDateStr]
    elif (len(savedSunData) > 0):
        maxSavedDateStr=max(savedSunData)
        result=savedSunData[maxSavedDateStr]
    else:
        result={'sunrise':'1970-01-01 00:00:00', 'sunset':'1970-01-01 00:00:00', 'tzOffset':'0'}
    
    return result

def generateRestData(siteInfo):
    currentTime = datetime.now()
    currentTimeStr = currentTime.strftime(database.datetimeFormat)

    # Get right now data
    restData = {}
    restData['now'] = database.getClosestOverview(siteInfo,currentTimeStr)
    restData['now'].update(getBestSunData(siteInfo))
    
    # Get data from this time yesterday
    thisTimeYesterday = currentTime - timedelta(days=1)
    thisTimeYesterdayStr = thisTimeYesterday.strftime(database.datetimeFormat)
    restData['yesterday'] = database.getClosestOverview(siteInfo,thisTimeYesterdayStr)
    
    # Get peaks for today and yesterday
    yesterdayStart = thisTimeYesterday.replace(hour=0, minute=0, second=0, microsecond=0)
    yesterdayStartStr = yesterdayStart.strftime(database.datetimeFormat)
    
    peaks = database.getDailyBetween(siteInfo,yesterdayStartStr,currentTimeStr)
    
    currentDateStr = currentTime.strftime(database.dateOnlyFormat)
    yesterdayDateStr = yesterdayStart.strftime(database.dateOnlyFormat)

    try:
        restData['now']['peakPower'] = peaks[currentDateStr]['peakPower']
    except (KeyError):
        restData['now']['peakPower'] = 0
    except:
        raise
    
    restData['yesterday']['peakPower'] = peaks[yesterdayDateStr]['peakPower']
    restData['yesterday']['maxEnergy'] = peaks[yesterdayDateStr]['energy']  
    
    # Get 30 day averages for peak power and energy
    # and daily details
    numDays = 30
    averageStartDate = currentTime.replace(hour=0, minute=0, second=0, microsecond=0) - timedelta(days=numDays)
    averageEndDate = currentTime.replace(hour=0, minute=0, second=0, microsecond=0) - timedelta(seconds=1)
    
    restData['30days'] = database.getAverageDayValues(siteInfo,averageStartDate,averageEndDate)
    restData['30days']['detail'] = database.getDailyBetween(siteInfo,averageStartDate,currentTime)
    
    # Get weekly details
    numWeeks = 12
    weeklyStartDate = currentTime.replace(hour=0, minute=0, second=0, microsecond=0) - timedelta(days=currentTime.weekday()) - timedelta(days=numWeeks*7)
    
    restData['weekly'] = {}
    restData['weekly']['detail'] = database.getWeeklyBetween(siteInfo,weeklyStartDate,currentTime)
    
    # Get Monthly details
    numMonths = 12
    monthlyStartDate = currentTime - timedelta(days=numMonths*30)
    monthlyStartDate = monthlyStartDate.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    
    restData['monthly'] = {}
    restData['monthly']['detail'] = database.getMonthlyBetween(siteInfo,monthlyStartDate,currentTime)
    
    return restData  
    
def outputJSON(siteInfo):
    restData = generateRestData(siteInfo)

    with open(siteInfo['name']+'.json', 'w') as output:
        json.dump(restData, output)


#
# main
#

siteInfo = database.getSiteInfo("dmalone")

updated = False

if updateSunData(siteInfo):
    updated = True

if updateOverview(siteInfo):
    updated = True

if updated:
    outputJSON(siteInfo)
