#!/usr/bin/python3

import database
import json
from datetime import datetime, timedelta
import time
import urllib
from urllib.request import urlopen
from urllib.error import HTTPError 

debug = False

# Should use database versions of these variables, e.g. database.dateOnlyFormat
# dateOnlyFormat='%Y-%m-%d'
# datetimeFormat='%Y-%m-%d %H:%M:%S'

milDateFormat="%m/%d/%Y"
milDateTimeFormat="%m/%d/%Y %H:%M"

def getCurrentOverview(siteInfo):
    restURL = 'https://monitoringapi.solaredge.com/site/'+siteInfo['id']+'/overview?api_key='+siteInfo['apiKey']
    try:
        restResponse = urlopen(restURL)
    except HTTPError as e:
        # This means something went wrong.
        raise Exception('getCurrentData: {}'.format(e.code))
        
    overview = json.loads(restResponse.read().decode("utf-8"))
    
#     with open('overview.json', 'r') as file:
#         overview = json.load(file)

    overviewDict={}
    overviewDict['queryTime'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    overviewDict['lastUpdateTime'] = overview['overview']['lastUpdateTime'].encode("utf-8")
    overviewDict['currentPower'] = overview['overview']['currentPower']['power']
    overviewDict['lastDayEnergy'] = overview['overview']['lastDayData']['energy']
    overviewDict['lastMonthEnergy'] = overview['overview']['lastMonthData']['energy']
    overviewDict['lastYearEnergy'] = overview['overview']['lastYearData']['energy']
    overviewDict['lifetimeEnergy'] = overview['overview']['lifeTimeData']['energy']

    return overviewDict

def updateOverview(siteInfo):
    updated = False
    
    lastOverview = database.getLastOverview(siteInfo)
    savedSunData = getBestSunData(siteInfo)

    sunriseDT = datetime.strptime(savedSunData['sunrise'],database.datetimeFormat)
    sunsetDT = datetime.strptime(savedSunData['sunset'],database.datetimeFormat)
    now = datetime.now()
    nowMinute = int(now.strftime('%M'))

    if ((nowMinute == 0) or                    # Always once an hour
        (lastOverview["currentPower"] > 0) or  # If we were generating at the last update
        ((now > sunriseDT) and (now < sunsetDT))): # Sun is up

        if debug:
            print("Updating")
        
        currentData = getCurrentOverview(siteInfo)
        updated = True

        currentData['lastUpdateTime'] = currentData['lastUpdateTime'].decode("utf-8")

        if debug:
            print("current:")
            print(currentData)
            print("last:")
            print(lastOverview)
    
        if (currentData['lastUpdateTime'] > lastOverview['lastUpdateTime']):
            database.insertOverview(siteInfo,currentData)
        else:
            if debug:
                print("no update")
    
    return updated

import arrow
from skyfield import api,almanac

skyfieldTs=None
skyfieldE=None
skyfieldInitialized=False
def initializeSkyfield():
    global skyfieldTs
    global skyfieldE
    global skyfieldInitialized
    if not skyfieldInitialized:
        skyfieldInitialized=True
        skyfieldTs = api.load.timescale(builtin=True)
        skyfieldE = api.load('de421.bsp')


def getBestSunData(siteInfo):
    initializeSkyfield()
    location = api.Topos(siteInfo['lat']+" N",siteInfo['lon']+" E")

    today = arrow.now().floor('day')

    utcStart = today.to('utc')
    utcEnd = utcStart.shift(days=+1)
    dateStart = skyfieldTs.utc(utcStart.year,
                               utcStart.month,
                               utcStart.day,
                               utcStart.hour,
                               utcStart.minute,
                               utcStart.second)
    dateEnd = skyfieldTs.utc(utcEnd.year,
                             utcEnd.month,
                             utcEnd.day,
                             utcEnd.hour,
                             utcEnd.minute,
                             utcEnd.second)

    time, rise = almanac.find_discrete(dateStart, dateEnd, almanac.sunrise_sunset(skyfieldE, location))

    sunrise=arrow.get(time[0].utc_iso())
    sunriseStr = sunrise.to('local').format('YYYY-MM-DD HH:mm:ss')

    sunset=arrow.get(time[1].utc_iso())
    sunsetStr = sunset.to('local').format('YYYY-MM-DD HH:mm:ss')

    tzStr = sunrise.to('local').format('Z').replace('0','',3)

    result={'sunrise': sunriseStr, 'sunset':sunsetStr, 'tzOffset':tzStr}

    return result

def generateRestData(siteInfo):
    currentTime = datetime.now()
    currentTimeStr = currentTime.strftime(database.datetimeFormat)

    # Get right now data
    restData = {}
    restData['now'] = database.getClosestOverview(siteInfo,currentTimeStr)
    restData['now'].update(getBestSunData(siteInfo))
    
    # Get data from this time yesterday
    thisTimeYesterday = currentTime - timedelta(days=1)
    thisTimeYesterdayStr = thisTimeYesterday.strftime(database.datetimeFormat)
    restData['yesterday'] = database.getClosestOverview(siteInfo,thisTimeYesterdayStr)
    
    # Get peaks for today and yesterday
    yesterdayStart = thisTimeYesterday.replace(hour=0, minute=0, second=0, microsecond=0)
    yesterdayStartStr = yesterdayStart.strftime(database.datetimeFormat)
    
    peaks = database.getDailyBetween(siteInfo,yesterdayStartStr,currentTimeStr)
    
    currentDateStr = currentTime.strftime(database.dateOnlyFormat)
    yesterdayDateStr = yesterdayStart.strftime(database.dateOnlyFormat)

    try:
        restData['now']['peakPower'] = peaks[currentDateStr]['peakPower']
    except (KeyError):
        restData['now']['peakPower'] = 0
    except:
        raise
    
    try:
        restData['yesterday']['peakPower'] = peaks[yesterdayDateStr]['peakPower']
        restData['yesterday']['maxEnergy'] = peaks[yesterdayDateStr]['energy']  
    except (KeyError):
        restData['yesterday']['peakPower'] = 0
        restData['yesterday']['maxEnergy'] = 0 
    except:
        raise
    
    # Get 30 day averages for peak power and energy
    # and daily details
    numDays = 30
    averageStartDate = currentTime.replace(hour=0, minute=0, second=0, microsecond=0) - timedelta(days=numDays)
    averageEndDate = currentTime.replace(hour=0, minute=0, second=0, microsecond=0) - timedelta(seconds=1)
    
    restData['30days'] = database.getAverageDayValues(siteInfo,averageStartDate,averageEndDate)
    restData['30days']['detail'] = database.getDailyBetween(siteInfo,averageStartDate,currentTime)
    
    # Get weekly details
    numWeeks = 12
    weeklyStartDate = currentTime.replace(hour=0, minute=0, second=0, microsecond=0) - timedelta(days=currentTime.weekday()) - timedelta(days=numWeeks*7)
    
    restData['weekly'] = {}
    restData['weekly']['detail'] = database.getWeeklyBetween(siteInfo,weeklyStartDate,currentTime)
    
    # Get Monthly details
    numMonths = 12
    monthlyStartDate = currentTime - timedelta(days=numMonths*30)
    monthlyStartDate = monthlyStartDate.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    
    restData['monthly'] = {}
    restData['monthly']['detail'] = database.getMonthlyBetween(siteInfo,monthlyStartDate,currentTime)
    
    return restData  
    
def outputJSON(siteInfo):
    restData = generateRestData(siteInfo)

    with open(siteInfo['name']+'.json', 'w') as output:
        json.dump(restData, output)


#
# main
#

siteInfo = database.getSiteInfo("dmalone")

updated = False

if updateOverview(siteInfo):
    updated = True

if updated:
    outputJSON(siteInfo)
